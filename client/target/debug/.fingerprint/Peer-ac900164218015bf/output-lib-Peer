{"$message_type":"diagnostic","message":"unused import: `RwLock`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/lib.rs","byte_start":35,"byte_end":41,"line_start":2,"line_end":2,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"use std::sync::{Arc, RwLock};","highlight_start":22,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/lib.rs","byte_start":29,"byte_end":30,"line_start":2,"line_end":2,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"use std::sync::{Arc, RwLock};","highlight_start":16,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/lib.rs","byte_start":33,"byte_end":41,"line_start":2,"line_end":2,"column_start":20,"column_end":28,"is_primary":true,"text":[{"text":"use std::sync::{Arc, RwLock};","highlight_start":20,"highlight_end":28}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/lib.rs","byte_start":41,"byte_end":42,"line_start":2,"line_end":2,"column_start":28,"column_end":29,"is_primary":true,"text":[{"text":"use std::sync::{Arc, RwLock};","highlight_start":28,"highlight_end":29}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `RwLock`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/RustroverProjects/termnial_chat_app/Peer/src/lib.rs:2:22\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::sync::{Arc, RwLock};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":963,"byte_end":973,"line_start":25,"line_end":25,"column_start":37,"column_end":47,"is_primary":true,"text":[{"text":"                                    Disconnect => {","highlight_start":37,"highlight_end":47}],"label":"unreachable pattern","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":808,"byte_end":815,"line_start":22,"line_end":22,"column_start":37,"column_end":44,"is_primary":false,"text":[{"text":"                                    Connect => {","highlight_start":37,"highlight_end":44}],"label":"matches any value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs:25:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   Connect => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmatches any value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   Disconnect => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_patterns)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `Disconnect`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":963,"byte_end":973,"line_start":25,"line_end":25,"column_start":37,"column_end":47,"is_primary":true,"text":[{"text":"                                    Disconnect => {","highlight_start":37,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":963,"byte_end":973,"line_start":25,"line_end":25,"column_start":37,"column_end":47,"is_primary":true,"text":[{"text":"                                    Disconnect => {","highlight_start":37,"highlight_end":47}],"label":null,"suggested_replacement":"_Disconnect","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `Disconnect`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs:25:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   Disconnect => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_Disconnect`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"crate `Peer` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case: `peer`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: crate `Peer` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: convert the identifier to snake case: `peer`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified","code":{"code":"async_fn_in_trait","explanation":null},"level":"warning","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":201,"byte_end":206,"line_start":9,"line_end":9,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    async fn run(&self) {","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(async_fn_in_trait)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change","code":null,"level":"help","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":201,"byte_end":207,"line_start":9,"line_end":9,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    async fn run(&self) {","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":220,"byte_end":220,"line_start":9,"line_end":9,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"    async fn run(&self) {","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":" -> impl std::future::Future<Output = ()> + Send","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":222,"byte_end":222,"line_start":9,"line_end":9,"column_start":26,"column_end":26,"is_primary":true,"text":[{"text":"    async fn run(&self) {","highlight_start":26,"highlight_end":26}],"label":null,"suggested_replacement":"async {","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":1503,"byte_end":1503,"line_start":42,"line_end":42,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    }","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"} ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn run(&self) {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(async_fn_in_trait)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m    fn run(&self)\u001b[0m\u001b[0m\u001b[38;5;10m -> impl std::future::Future<Output = ()> + Send\u001b[0m\u001b[0m {\u001b[0m\u001b[0m\u001b[38;5;10masync {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10|\u001b[0m\u001b[0m         loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41|\u001b[0m\u001b[0m         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m} \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `Connect` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":808,"byte_end":815,"line_start":22,"line_end":22,"column_start":37,"column_end":44,"is_primary":true,"text":[{"text":"                                    Connect => {","highlight_start":37,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":808,"byte_end":815,"line_start":22,"line_end":22,"column_start":37,"column_end":44,"is_primary":true,"text":[{"text":"                                    Connect => {","highlight_start":37,"highlight_end":44}],"label":null,"suggested_replacement":"connect","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Connect` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs:22:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   Connect => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `connect`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `Disconnect` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":963,"byte_end":973,"line_start":25,"line_end":25,"column_start":37,"column_end":47,"is_primary":true,"text":[{"text":"                                    Disconnect => {","highlight_start":37,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":963,"byte_end":973,"line_start":25,"line_end":25,"column_start":37,"column_end":47,"is_primary":true,"text":[{"text":"                                    Disconnect => {","highlight_start":37,"highlight_end":47}],"label":null,"suggested_replacement":"disconnect","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Disconnect` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs:25:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   Disconnect => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `disconnect`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified","code":{"code":"async_fn_in_trait","explanation":null},"level":"warning","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":1554,"byte_end":1559,"line_start":46,"line_end":46,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    async fn send(&self, addr: String, port: u16, buffer: &[u8] ) {","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change","code":null,"level":"help","spans":[{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":1554,"byte_end":1560,"line_start":46,"line_end":46,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    async fn send(&self, addr: String, port: u16, buffer: &[u8] ) {","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":1615,"byte_end":1615,"line_start":46,"line_end":46,"column_start":66,"column_end":66,"is_primary":true,"text":[{"text":"    async fn send(&self, addr: String, port: u16, buffer: &[u8] ) {","highlight_start":66,"highlight_end":66}],"label":null,"suggested_replacement":" -> impl std::future::Future<Output = ()> + Send","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":1617,"byte_end":1617,"line_start":46,"line_end":46,"column_start":68,"column_end":68,"is_primary":true,"text":[{"text":"    async fn send(&self, addr: String, port: u16, buffer: &[u8] ) {","highlight_start":68,"highlight_end":68}],"label":null,"suggested_replacement":"async {","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs","byte_start":1901,"byte_end":1901,"line_start":51,"line_end":51,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    }","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"} ","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/user/RustroverProjects/termnial_chat_app/Peer/src/peer.rs:46:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn send(&self, addr: String, port: u16, buffer: &[u8] ) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m    fn send(&self, addr: String, port: u16, buffer: &[u8] )\u001b[0m\u001b[0m\u001b[38;5;10m -> impl std::future::Future<Output = ()> + Send\u001b[0m\u001b[0m {\u001b[0m\u001b[0m\u001b[38;5;10masync {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         let _socket = self.get_send_socket().lock().await;\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         _socket.send_to(buffer, format!(\"{}:{}\", addr, port)).await.unwrap();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m} \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"8 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 8 warnings emitted\u001b[0m\n\n"}
